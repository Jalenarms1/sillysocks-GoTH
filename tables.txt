drop table if exists "CartItem"
create table "CartItem" (
	"Id" uuid primary key,
	"ProductId" uuid not null,
    "ProductName" varchar(250) not null,
    "ProductImage" varchar(250) not null,
    "ProductPrice" numeric(10,2) not null,
	"CartId" uuid not null,
	"Total" numeric(10,2) not null,
	"Quantity" int not null,
	foreign key ("ProductId") references "Product"("Id"),
	foreign key ("CartId") references "Cart"("Id")
)

create table "Cart" (
	"Id" uuid primary key,
	"SubTotal" numeric(10,2) not null,
	"Tax" numeric(10,2) not null
)

CREATE TABLE IF NOT EXISTS "Product"
(
    "Id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "Name" character varying(250) COLLATE pg_catalog."default" NOT NULL,
    "Description" text COLLATE pg_catalog."default",
    "Category" character varying(200) COLLATE pg_catalog."default",
    "Image" text COLLATE pg_catalog."default" NOT NULL,
    "Price" numeric(10,2) NOT NULL,
    "Quantity" integer NOT NULL,
    CONSTRAINT "Product_pkey" PRIMARY KEY ("Id")
)

CREATE TABLE IF NOT EXISTS "Order" (
    "Id" TEXT PRIMARY KEY,
    "CstId" VARCHAR(255) NOT NULL,
    "PmtIntId" VARCHAR(255) NOT NULL,
    "CustomerEmail" VARCHAR(255) NOT NULL,
    "CustomerName" VARCHAR(255) NOT NULL,
    "CreatedAt" INTEGER NOT NULL,
    "SubTotal" REAL NOT NULL,
    "Tax" REAL NOT NULL,
    "Shipping" REAL NOT NULL,
    "ShippingAddrLine1" VARCHAR(255) NOT NULL,
    "ShippingAddrLine2" VARCHAR(255),
    "ShippingAddrCity" VARCHAR(100) NOT NULL,
    "ShippingAddrState" VARCHAR(100) NOT NULL,
    "ShippingAddrZip" VARCHAR(20) NOT NULL,
    "Shipped" BOOLEAN NOT NULL DEFAULT 0
);


drop table if exists OrderItem;
CREATE TABLE IF NOT EXISTS OrderItem (
    Id TEXT PRIMARY KEY,
    OrderId TEXT NOT NULL,
    Total REAL NOT NULL,
    Quantity INTEGER NOT NULL,
    ProductId TEXT NOT NULL,
    FOREIGN KEY (OrderId) REFERENCES Order (Id),
    FOREIGN KEY (ProductId) REFERENCES Product (Id)
);

drop table if exists DbStore;
create table DbStore (
    Id TEXT PRIMARY KEY NOT NULL,
    Hostname TEXT NOT NULL,
    AuthToken TEXT NOT NULL,
    UserUid TEXT NOT NULL

);
insQ := `
		INSERT INTO DbStore (
			Id,
			Hostname,
			AuthToken,
			UserUid
		)
		VALUES (
			:Id,
			:Hostname,
			:AuthToken,
			:UserUid
		)

	`
